/*
 * Australian Public Licence B (OZPLB)
 * 
 * Version 1-0
 * 
 * Copyright (c) 2004 National ICT Australia
 * 
 * All rights reserved. 
 * 
 * Developed by: Embedded, Real-time and Operating Systems Program (ERTOS)
 *               National ICT Australia
 *               http://www.ertos.nicta.com.au
 * 
 * Permission is granted by National ICT Australia, free of charge, to
 * any person obtaining a copy of this software and any associated
 * documentation files (the "Software") to deal with the Software without
 * restriction, including (without limitation) the rights to use, copy,
 * modify, adapt, merge, publish, distribute, communicate to the public,
 * sublicense, and/or sell, lend or rent out copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimers in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of National ICT Australia, nor the names of its
 *       contributors, may be used to endorse or promote products derived
 *       from this Software without specific prior written permission.
 * 
 * EXCEPT AS EXPRESSLY STATED IN THIS LICENCE AND TO THE FULL EXTENT
 * PERMITTED BY APPLICABLE LAW, THE SOFTWARE IS PROVIDED "AS-IS", AND
 * NATIONAL ICT AUSTRALIA AND ITS CONTRIBUTORS MAKE NO REPRESENTATIONS,
 * WARRANTIES OR CONDITIONS OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO ANY REPRESENTATIONS, WARRANTIES OR CONDITIONS
 * REGARDING THE CONTENTS OR ACCURACY OF THE SOFTWARE, OR OF TITLE,
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT,
 * THE ABSENCE OF LATENT OR OTHER DEFECTS, OR THE PRESENCE OR ABSENCE OF
 * ERRORS, WHETHER OR NOT DISCOVERABLE.
 * 
 * TO THE FULL EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL
 * NATIONAL ICT AUSTRALIA OR ITS CONTRIBUTORS BE LIABLE ON ANY LEGAL
 * THEORY (INCLUDING, WITHOUT LIMITATION, IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHERWISE) FOR ANY CLAIM, LOSS, DAMAGES OR OTHER
 * LIABILITY, INCLUDING (WITHOUT LIMITATION) LOSS OF PRODUCTION OR
 * OPERATION TIME, LOSS, DAMAGE OR CORRUPTION OF DATA OR RECORDS; OR LOSS
 * OF ANTICIPATED SAVINGS, OPPORTUNITY, REVENUE, PROFIT OR GOODWILL, OR
 * OTHER ECONOMIC LOSS; OR ANY SPECIAL, INCIDENTAL, INDIRECT,
 * CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES, ARISING OUT OF OR IN
 * CONNECTION WITH THIS LICENCE, THE SOFTWARE OR THE USE OF OR OTHER
 * DEALINGS WITH THE SOFTWARE, EVEN IF NATIONAL ICT AUSTRALIA OR ITS
 * CONTRIBUTORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH CLAIM, LOSS,
 * DAMAGES OR OTHER LIABILITY.
 * 
 * If applicable legislation implies representations, warranties, or
 * conditions, or imposes obligations or liability on National ICT
 * Australia or one of its contributors in respect of the Software that
 * cannot be wholly or partly excluded, restricted or modified, the
 * liability of National ICT Australia or the contributor is limited, to
 * the full extent permitted by the applicable legislation, at its
 * option, to:
 * a.  in the case of goods, any one or more of the following:
 * i.  the replacement of the goods or the supply of equivalent goods;
 * ii.  the repair of the goods;
 * iii. the payment of the cost of replacing the goods or of acquiring
 *  equivalent goods;
 * iv.  the payment of the cost of having the goods repaired; or
 * b.  in the case of services:
 * i.  the supplying of the services again; or
 * ii.  the payment of the cost of having the services supplied again.
 * 
 * The construction, validity and performance of this licence is governed
 * by the laws in force in New South Wales, Australia.
 */
/*
 * Iguana IDL for dealing with userland
 * eg. pagefaults, exceptions, syscalls.
 *
 */

/* Import L4 and standard types */
import "l4/types.h";
import "iguana/types.h";
import "iguana/interface_uuids.h";
import "stdint.h";
import "stddef.h";

[uuid(INTERFACE_IGUANA_EX_UUID)] 
interface iguana_ex
{
	/* a pagefault (from iguana userland) */
	[kernelmsg(idl4::pagefault)]
	void pagefault(in uintptr_t addr, in uintptr_t ip, in uintptr_t priv,
		       out fpage fp);
	
	/* FIXME: add thread exceptions */
};

[uuid(INTERFACE_IGUANA_PD_UUID)]
interface iguana_pd
{
	/* This method is kind of magic */
	objref_t mypd();

	cap_t create_memsection(in pd_ref_t pd, in uintptr_t size, in uintptr_t base, in int flags,
				out uintptr_t base_out);
	cap_t create_pd(in pd_ref_t pd);
 	cap_t create_thread(in pd_ref_t pd, in int priority, out L4_ThreadId_t l4_id);
	cap_t create_eas(in pd_ref_t pd, in L4_Fpage_t kip, in L4_Fpage_t utcb);
	cap_t create_session(in pd_ref_t pd, in thread_ref_t client, in thread_ref_t server,
			     in memsection_ref_t clist);

	void set_callback(in pd_ref_t pd, in memsection_ref_t callback_buffer);
	
	uintptr_t add_clist(in pd_ref_t pd, in memsection_ref_t clist);

 
 	quota_ref_t get_quota(in pd_ref_t pd);

	
	void release_clist(in pd_ref_t pd, in uintptr_t clist, in int slot);

	void delete(in pd_ref_t pd);
};

[uuid(INTERFACE_IGUANA_EAS_UUID)]
interface iguana_eas
{
	cap_t create_thread(in eas_ref_t eas, in L4_ThreadId_t pager,
				in L4_ThreadId_t scheduler, in uintptr_t utcb,
				out L4_ThreadId_t l4_id);
	void delete(in eas_ref_t eas);
};

[uuid(INTERFACE_IGUANA_THREAD_UUID)]
interface iguana_thread
{
	/* This is another `magic' method */
	thread_ref_t id(in L4_ThreadId_t thread);
	L4_ThreadId_t l4id(in thread_ref_t thread);
	void start(in thread_ref_t thread, in uintptr_t ip, in uintptr_t sp);
/*	pd_ref_t domain(in thread_ref_t thread);*/

	void delete(in thread_ref_t thread);
	void set_exception(in thread_ref_t thread, in uintptr_t exc, 
			in uintptr_t ip, in uintptr_t sp);
};

[uuid(INTERFACE_IGUANA_HARDWARE_UUID)]
interface iguana_hardware
{
	int register_interrupt(in hw_ref_t hardware, in L4_ThreadId_t handler,
			       in int interrupt);
	int back_memsection(in hw_ref_t hardware, in memsection_ref_t memsection,
			    in uintptr_t paddr, in uintptr_t attributes);
};

[uuid(INTERFACE_IGUANA_MEMSECTION_UUID)]
interface iguana_memsection
{
	int register_server(in memsection_ref_t memsection, in thread_ref_t thread);
	memsection_ref_t lookup(in uintptr_t address, out thread_ref_t server);
	uintptr_t info(in memsection_ref_t memsection, out uintptr_t size);
	void delete(in memsection_ref_t thread);
	void set_attributes(in memsection_ref_t memsection, in uintptr_t attributes);
	int page_map(in memsection_ref_t memsection, in L4_Fpage_t from_page, in L4_Fpage_t to_page);
	int page_unmap(in memsection_ref_t memsection, in L4_Fpage_t to_page);
};

[uuid(INTERFACE_IGUANA_SESSION_UUID)]
interface iguana_session
{
	void delete(in session_ref_t session);
	int revoke(in session_ref_t session, in cap_t cap);
	void add_buffer(in session_ref_t session, in objref_t call_buf, in objref_t return_buf);
};

[uuid(INTERFACE_IGUANA_DEBUG_UUID)]
interface iguana_debug
{
	void dump_info();
};

[uuid(INTERFACE_IGUANA_QUOTA_UUID)]
interface iguana_quota
{
	int transfer(in quota_ref_t q1, in quota_ref_t q2, in int amount);
	int get_max(in quota_ref_t q);
	int get_used(in quota_ref_t q);
};
