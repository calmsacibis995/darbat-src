/* 
 * This is an automatically-generated file.
 * Source file  : test/input/char_ptr_arg_2.idl4
 * Output file  : -
 * Platform     : V4 ARM (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH arm_biguuid

#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

/* This from $pistachio/include/l4/arm/syscalls.h */
#define MAGPIE__L4_SYSCALL                   \
        "str    fp,     [sp, #-4]! \n" \
        "mov    lr,     pc         \n" \
        "mov    pc,     ip         \n" \
        "ldr    fp,     [sp],   #4 \n"

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid_arm/idl4.h"
#ifdef __cplusplus
}
#endif



#include "char_ptr_arg_2.h"



#if !defined(__-__)
#define __-__




/* Interface iguana_thread */
void iguana_thread_server(void);
void iguana_thread_discard(void);


#define IGUANA_THREAD_DEFAULT_VTABLE { service_iguana_thread_id, service_iguana_thread_l4id, service_iguana_thread_set_handle, service_iguana_thread_getId_from_handle, service_iguana_thread_clr_handle, service_iguana_thread_start, service_iguana_thread_delete }
#define IGUANA_THREAD_DEFAULT_VTABLE_SIZE 7


#define IGUANA_THREAD_MAX_FID 6
#define IGUANA_THREAD_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_THREAD_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_THREAD_FID_MASK 0x7







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		L4_ThreadId_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		thread_ref_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_id;

long service_iguana_thread_id(L4_ThreadId_t _caller, _param_iguana_thread_id *_par);

inline thread_ref_t iguana_thread_id_implementation (CORBA_Object _caller, L4_ThreadId_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_ID(_func) long service_iguana_thread_id(L4_ThreadId_t _caller, _param_iguana_thread_id *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_id IDL4_PUBLISH_IGUANA_THREAD_ID
static inline void iguana_thread_id_reply(CORBA_Object _client , thread_ref_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			thread_ref_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		L4_ThreadId_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_l4id;

long service_iguana_thread_l4id(L4_ThreadId_t _caller, _param_iguana_thread_l4id *_par);

inline L4_ThreadId_t iguana_thread_l4id_implementation (CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_L4ID(_func) long service_iguana_thread_l4id(L4_ThreadId_t _caller, _param_iguana_thread_l4id *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_l4id IDL4_PUBLISH_IGUANA_THREAD_L4ID
static inline void iguana_thread_l4id_reply(CORBA_Object _client , L4_ThreadId_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			L4_ThreadId_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		L4_ThreadId_t thrd_id;
		char *handle;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_set_handle;

long service_iguana_thread_set_handle(L4_ThreadId_t _caller, _param_iguana_thread_set_handle *_par);

inline void iguana_thread_set_handle_implementation (CORBA_Object _caller, L4_ThreadId_t thrd_id, char *handle, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_SET_HANDLE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_SET_HANDLE(_func) long service_iguana_thread_set_handle(L4_ThreadId_t _caller, _param_iguana_thread_set_handle *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thrd_id, _par->_in.handle, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_SET_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_SET_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_set_handle IDL4_PUBLISH_IGUANA_THREAD_SET_HANDLE
static inline void iguana_thread_set_handle_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		char *handle;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		L4_ThreadId_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_getId_from_handle;

long service_iguana_thread_getId_from_handle(L4_ThreadId_t _caller, _param_iguana_thread_getId_from_handle *_par);

inline L4_ThreadId_t iguana_thread_getId_from_handle_implementation (CORBA_Object _caller, char *handle, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_GETID_FROM_HANDLE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_GETID_FROM_HANDLE(_func) long service_iguana_thread_getId_from_handle(L4_ThreadId_t _caller, _param_iguana_thread_getId_from_handle *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.handle, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_GETID_FROM_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_GETID_FROM_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_getId_from_handle IDL4_PUBLISH_IGUANA_THREAD_GETID_FROM_HANDLE
static inline void iguana_thread_getId_from_handle_reply(CORBA_Object _client , L4_ThreadId_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			L4_ThreadId_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		L4_ThreadId_t thrd_id;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_clr_handle;

long service_iguana_thread_clr_handle(L4_ThreadId_t _caller, _param_iguana_thread_clr_handle *_par);

inline int iguana_thread_clr_handle_implementation (CORBA_Object _caller, L4_ThreadId_t thrd_id, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_CLR_HANDLE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_CLR_HANDLE(_func) long service_iguana_thread_clr_handle(L4_ThreadId_t _caller, _param_iguana_thread_clr_handle *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.thrd_id, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_CLR_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_CLR_HANDLE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_clr_handle IDL4_PUBLISH_IGUANA_THREAD_CLR_HANDLE
static inline void iguana_thread_clr_handle_reply(CORBA_Object _client , int __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		uintptr_t ip;
		uintptr_t sp;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_start;

long service_iguana_thread_start(L4_ThreadId_t _caller, _param_iguana_thread_start *_par);

inline void iguana_thread_start_implementation (CORBA_Object _caller, thread_ref_t thread, uintptr_t ip, uintptr_t sp, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_START(_func) long service_iguana_thread_start(L4_ThreadId_t _caller, _param_iguana_thread_start *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thread, _par->_in.ip, _par->_in.sp, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_start IDL4_PUBLISH_IGUANA_THREAD_START
static inline void iguana_thread_start_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_delete;

long service_iguana_thread_delete(L4_ThreadId_t _caller, _param_iguana_thread_delete *_par);

inline void iguana_thread_delete_implementation (CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_DELETE(_func) long service_iguana_thread_delete(L4_ThreadId_t _caller, _param_iguana_thread_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_delete IDL4_PUBLISH_IGUANA_THREAD_DELETE
static inline void iguana_thread_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





#endif //__-__
