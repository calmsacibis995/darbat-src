/* 
 * This is an automatically-generated file.
 * Source file  : test/input/bitfields.idl4
 * Output file  : -
 * Platform     : V4 ARM (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH arm_biguuid


#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

/* This from $pistachio/include/l4/arm/syscalls.h */
#define MAGPIE__L4_SYSCALL                   \
        "str    fp,     [sp, #-4]! \n" \
        "mov    lr,     pc         \n" \
        "mov    pc,     ip         \n" \
        "ldr    fp,     [sp],   #4 \n"

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid_arm/idl4.h"
#ifdef __cplusplus
}
#endif



#include "bitfields.h"



#if !defined(__-__)
#define __-__




/* Interface bitfield_1 */
#if !defined(_objdef___bitfield_1)
#define _objdef___bitfield_1
typedef CORBA_Object bitfield_1;
#endif // !defined(_objdef___bitfield_1)




#if !defined(_funcdef___bitfield_1_bftest1)
#define _funcdef___bitfield_1_bftest1
/* Biguuid generic code: _MAGPIE_BITFIELD_1_BFTEST1_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_BITFIELD_1_BFTEST1_CALL_ID (0u)

static inline int bitfield_1_bftest1 (bitfield_1 _service, foo *h, CORBA_Environment *_env)
{



	register L4_ThreadId_t ipc_dest asm("r0") = _service;
	register L4_ThreadId_t ipc_FromSpecifier asm("r1") = _service;
	register L4_Word_t ipc_Timeouts asm("r2") = L4_Timeouts(L4_Never, L4_Never);
	register L4_MsgTag_t client_msgtag asm("r3");
	register L4_Word_t r_mr1 asm("r4"); /* UUID on input and (sometimes) result on output */ 
	register L4_Word_t r_mr2 asm("r5"); 
	
	
	register __L4_Ipc_t r_syscall asm("r12") = __L4_Ipc;
	L4_Word_t _asynch_mask;
	

#if 0
	/* Self-check code */
	union _MAGPIE_BITFIELD_1_BFTEST1_arm_buf {
		struct {
			long _msgtag;
			long _uuid;
			foo h;
		} _in;
		struct {
			long _msgtag;
			int __retval;
		} _out;
	} __MAGPIE_BITFIELD_1_BFTEST1_arm_pack;
	assert( ((sizeof(__MAGPIE_BITFIELD_1_BFTEST1_arm_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) == (1 + 1));
	assert( ((sizeof(__MAGPIE_BITFIELD_1_BFTEST1_arm_pack._out) - sizeof(long)) /
MAGPIE_BYTES_PER_WORD) == (1) );
	/* End of self-check code */
#endif

	/* Calculate the message tag for parameter 1*/
	client_msgtag.raw = ((_MAGPIE_BITFIELD_1_BFTEST1_CALL_ID) << 16) + 1 + 1; /* Add 1 for UUID */
	/* Copy all inputs into registers, starting with UUID. NB the pass-by-reference case is evil*/ 
	r_mr1 = 1;

	r_mr2 =  *((L4_Word_t*)h);
	
	/* Call L4 IPC directly using the __L4_SYSCALL macro
	* defined in include/l4/arm/syscalls.h */
	
	
	__asm__ __volatile (
		MAGPIE__L4_SYSCALL 
		: "=r" (ipc_dest), "=r" (client_msgtag), "=r" (r_mr1),
			"=r" (ipc_FromSpecifier), "=r" (ipc_Timeouts), "=r" (r_syscall)
		: "r" (client_msgtag), "r" (r_mr1), "r" (r_mr2),
			"r" (r_syscall), "r" (ipc_dest), "r" (ipc_FromSpecifier), "r" (ipc_Timeouts)
		: "r6", "r7", "lr", "r8", "r9", "r10" /* r8, r9, r10 constitute __L4_ALWAYS_CLOBBER */
	);
	
	/* Copy results from output registers. */ 
	
	/* Result fits in a single register. */
	return (int)r_mr1;
	
	


}
#endif // !defined(_funcdef___bitfield_1_bftest1)





#endif //__-__
