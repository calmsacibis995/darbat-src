/* 
 * This is an automatically-generated file.
 * Source file  : test/input/iguana.idl4
 * Output file  : -
 * Platform     : V4 ARM (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH arm_biguuid

#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

/* This from $pistachio/include/l4/arm/syscalls.h */
#define MAGPIE__L4_SYSCALL                   \
        "str    fp,     [sp, #-4]! \n" \
        "mov    lr,     pc         \n" \
        "mov    pc,     ip         \n" \
        "ldr    fp,     [sp],   #4 \n"

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid_arm/idl4.h"
#ifdef __cplusplus
}
#endif



#include "l4/types.h"

#include "iguana/types.h"

#include "stdint.h"

#include "stddef.h"



#if !defined(__-__)
#define __-__




/* Interface iguana_ex */
void iguana_ex_server(void);
void iguana_ex_discard(void);


#define IGUANA_EX_DEFAULT_VTABLE { service_iguana_ex_pagefault }
#define IGUANA_EX_DEFAULT_VTABLE_SIZE 1


#define IGUANA_EX_DEFAULT_KTABLE { iguana_ex_discard, iguana_ex_discard, service_iguana_ex_pagefault, iguana_ex_discard }
#define IGUANA_EX_DEFAULT_KTABLE_SIZE 4
#define IGUANA_EX_KID_MASK 0x3

#define IGUANA_EX_MAX_FID 0
#define IGUANA_EX_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_EX_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_EX_FID_MASK 0x0







typedef union {
	struct {
		long _msgtag;
		uintptr_t addr;
		uintptr_t ip;
		uintptr_t priv;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		idl4_mapitem fp;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_ex_pagefault;

long service_iguana_ex_pagefault(L4_ThreadId_t _caller, _param_iguana_ex_pagefault *_par);

inline void iguana_ex_pagefault_implementation (CORBA_Object _caller, uintptr_t addr, uintptr_t ip, uintptr_t priv, idl4_mapitem *fp, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

/* Fpages (map items) also count. */
#define _MAGPIE_IGUANA_EX_PAGEFAULT_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)) - (1 * sizeof(idl4_mapitem)))


#define IDL4_PUBLISH_IGUANA_EX_PAGEFAULT(_func) long service_iguana_ex_pagefault(L4_ThreadId_t _caller, _param_iguana_ex_pagefault *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.addr, _par->_in.ip, (_par->_in._msgtag >> 16) & 7, &_par->_out.fp, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (2 << 6) + \
			(_MAGPIE_IGUANA_EX_PAGEFAULT_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (2 << 6) + \
			(_MAGPIE_IGUANA_EX_PAGEFAULT_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 2 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_ex_pagefault IDL4_PUBLISH_IGUANA_EX_PAGEFAULT
static inline void iguana_ex_pagefault_reply(CORBA_Object _client, idl4_mapitem * fp )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			idl4_mapitem fp;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.fp = * fp;
	
	
	
	/* send message */

	_buf._out._msgtag = 2 + (2 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_pd */
void iguana_pd_server(void);
void iguana_pd_discard(void);


#define IGUANA_PD_DEFAULT_VTABLE { service_iguana_pd_mypd, service_iguana_pd_create_memsection, service_iguana_pd_create_pd, service_iguana_pd_create_thread, service_iguana_pd_create_eas, service_iguana_pd_create_session, service_iguana_pd_set_callback, service_iguana_pd_delete }
#define IGUANA_PD_DEFAULT_VTABLE_SIZE 8


#define IGUANA_PD_MAX_FID 7
#define IGUANA_PD_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_PD_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_PD_FID_MASK 0x7







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		objref_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_mypd;

long service_iguana_pd_mypd(L4_ThreadId_t _caller, _param_iguana_pd_mypd *_par);

inline objref_t iguana_pd_mypd_implementation (CORBA_Object _caller, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_MYPD_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_MYPD(_func) long service_iguana_pd_mypd(L4_ThreadId_t _caller, _param_iguana_pd_mypd *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_MYPD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_MYPD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_mypd IDL4_PUBLISH_IGUANA_PD_MYPD
static inline void iguana_pd_mypd_reply(CORBA_Object _client , objref_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			objref_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		uintptr_t size;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		uintptr_t base;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_create_memsection;

long service_iguana_pd_create_memsection(L4_ThreadId_t _caller, _param_iguana_pd_create_memsection *_par);

inline cap_t iguana_pd_create_memsection_implementation (CORBA_Object _caller, pd_ref_t pd, uintptr_t size, uintptr_t *base, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_CREATE_MEMSECTION_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_CREATE_MEMSECTION(_func) long service_iguana_pd_create_memsection(L4_ThreadId_t _caller, _param_iguana_pd_create_memsection *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.pd, _par->_in.size, &_par->_out.base, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_MEMSECTION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_MEMSECTION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 3 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_create_memsection IDL4_PUBLISH_IGUANA_PD_CREATE_MEMSECTION
static inline void iguana_pd_create_memsection_reply(CORBA_Object _client, uintptr_t * base , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			uintptr_t base;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.base = * base;
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 3 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_create_pd;

long service_iguana_pd_create_pd(L4_ThreadId_t _caller, _param_iguana_pd_create_pd *_par);

inline cap_t iguana_pd_create_pd_implementation (CORBA_Object _caller, pd_ref_t pd, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_CREATE_PD_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_CREATE_PD(_func) long service_iguana_pd_create_pd(L4_ThreadId_t _caller, _param_iguana_pd_create_pd *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.pd, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_PD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_PD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 2 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_create_pd IDL4_PUBLISH_IGUANA_PD_CREATE_PD
static inline void iguana_pd_create_pd_reply(CORBA_Object _client , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 2 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		L4_ThreadId_t l4_id;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_create_thread;

long service_iguana_pd_create_thread(L4_ThreadId_t _caller, _param_iguana_pd_create_thread *_par);

inline cap_t iguana_pd_create_thread_implementation (CORBA_Object _caller, pd_ref_t pd, L4_ThreadId_t *l4_id, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_CREATE_THREAD_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_CREATE_THREAD(_func) long service_iguana_pd_create_thread(L4_ThreadId_t _caller, _param_iguana_pd_create_thread *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.pd, &_par->_out.l4_id, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_THREAD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_THREAD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 3 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_create_thread IDL4_PUBLISH_IGUANA_PD_CREATE_THREAD
static inline void iguana_pd_create_thread_reply(CORBA_Object _client, L4_ThreadId_t * l4_id , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			L4_ThreadId_t l4_id;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.l4_id = * l4_id;
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 3 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		L4_Fpage_t kip;
		L4_Fpage_t utcb;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_create_eas;

long service_iguana_pd_create_eas(L4_ThreadId_t _caller, _param_iguana_pd_create_eas *_par);

inline cap_t iguana_pd_create_eas_implementation (CORBA_Object _caller, pd_ref_t pd, L4_Fpage_t *kip, L4_Fpage_t *utcb, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_CREATE_EAS_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_CREATE_EAS(_func) long service_iguana_pd_create_eas(L4_ThreadId_t _caller, _param_iguana_pd_create_eas *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.pd, &_par->_in.kip, &_par->_in.utcb, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_EAS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_EAS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 2 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_create_eas IDL4_PUBLISH_IGUANA_PD_CREATE_EAS
static inline void iguana_pd_create_eas_reply(CORBA_Object _client , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 2 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		thread_ref_t client;
		thread_ref_t server;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_create_session;

long service_iguana_pd_create_session(L4_ThreadId_t _caller, _param_iguana_pd_create_session *_par);

inline cap_t iguana_pd_create_session_implementation (CORBA_Object _caller, pd_ref_t pd, thread_ref_t client, thread_ref_t server, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_CREATE_SESSION_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_CREATE_SESSION(_func) long service_iguana_pd_create_session(L4_ThreadId_t _caller, _param_iguana_pd_create_session *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.pd, _par->_in.client, _par->_in.server, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_SESSION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_CREATE_SESSION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 2 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_create_session IDL4_PUBLISH_IGUANA_PD_CREATE_SESSION
static inline void iguana_pd_create_session_reply(CORBA_Object _client , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 2 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		memsection_ref_t callback_buffer;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_set_callback;

long service_iguana_pd_set_callback(L4_ThreadId_t _caller, _param_iguana_pd_set_callback *_par);

inline void iguana_pd_set_callback_implementation (CORBA_Object _caller, pd_ref_t pd, memsection_ref_t callback_buffer, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_SET_CALLBACK_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_SET_CALLBACK(_func) long service_iguana_pd_set_callback(L4_ThreadId_t _caller, _param_iguana_pd_set_callback *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.pd, _par->_in.callback_buffer, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_SET_CALLBACK_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_SET_CALLBACK_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_set_callback IDL4_PUBLISH_IGUANA_PD_SET_CALLBACK
static inline void iguana_pd_set_callback_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		pd_ref_t pd;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_pd_delete;

long service_iguana_pd_delete(L4_ThreadId_t _caller, _param_iguana_pd_delete *_par);

inline void iguana_pd_delete_implementation (CORBA_Object _caller, pd_ref_t pd, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_PD_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_PD_DELETE(_func) long service_iguana_pd_delete(L4_ThreadId_t _caller, _param_iguana_pd_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.pd, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_PD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_PD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_pd_delete IDL4_PUBLISH_IGUANA_PD_DELETE
static inline void iguana_pd_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_eas */
void iguana_eas_server(void);
void iguana_eas_discard(void);


#define IGUANA_EAS_DEFAULT_VTABLE { service_iguana_eas_create_thread, service_iguana_eas_delete }
#define IGUANA_EAS_DEFAULT_VTABLE_SIZE 2


#define IGUANA_EAS_MAX_FID 1
#define IGUANA_EAS_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_EAS_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_EAS_FID_MASK 0x1







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		eas_ref_t eas;
		L4_ThreadId_t start;
		L4_ThreadId_t pager;
		L4_ThreadId_t scheduler;
		uintptr_t utcb;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		L4_ThreadId_t l4_id;
		cap_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_eas_create_thread;

long service_iguana_eas_create_thread(L4_ThreadId_t _caller, _param_iguana_eas_create_thread *_par);

inline cap_t iguana_eas_create_thread_implementation (CORBA_Object _caller, eas_ref_t eas, L4_ThreadId_t *start, L4_ThreadId_t *pager, L4_ThreadId_t *scheduler, uintptr_t utcb, L4_ThreadId_t *l4_id, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_EAS_CREATE_THREAD_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_EAS_CREATE_THREAD(_func) long service_iguana_eas_create_thread(L4_ThreadId_t _caller, _param_iguana_eas_create_thread *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.eas, &_par->_in.start, &_par->_in.pager, &_par->_in.scheduler, _par->_in.utcb, &_par->_out.l4_id, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_EAS_CREATE_THREAD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_EAS_CREATE_THREAD_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 3 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_eas_create_thread IDL4_PUBLISH_IGUANA_EAS_CREATE_THREAD
static inline void iguana_eas_create_thread_reply(CORBA_Object _client, L4_ThreadId_t * l4_id , cap_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			L4_ThreadId_t l4_id;
			
			cap_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.l4_id = * l4_id;
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 3 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		eas_ref_t eas;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_eas_delete;

long service_iguana_eas_delete(L4_ThreadId_t _caller, _param_iguana_eas_delete *_par);

inline void iguana_eas_delete_implementation (CORBA_Object _caller, eas_ref_t eas, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_EAS_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_EAS_DELETE(_func) long service_iguana_eas_delete(L4_ThreadId_t _caller, _param_iguana_eas_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.eas, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_EAS_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_EAS_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_eas_delete IDL4_PUBLISH_IGUANA_EAS_DELETE
static inline void iguana_eas_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_thread */
void iguana_thread_server(void);
void iguana_thread_discard(void);


#define IGUANA_THREAD_DEFAULT_VTABLE { service_iguana_thread_id, service_iguana_thread_l4id, service_iguana_thread_start, service_iguana_thread_delete }
#define IGUANA_THREAD_DEFAULT_VTABLE_SIZE 4


#define IGUANA_THREAD_MAX_FID 3
#define IGUANA_THREAD_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_THREAD_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_THREAD_FID_MASK 0x3







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		L4_ThreadId_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		thread_ref_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_id;

long service_iguana_thread_id(L4_ThreadId_t _caller, _param_iguana_thread_id *_par);

inline thread_ref_t iguana_thread_id_implementation (CORBA_Object _caller, L4_ThreadId_t *thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_ID(_func) long service_iguana_thread_id(L4_ThreadId_t _caller, _param_iguana_thread_id *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, &_par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_id IDL4_PUBLISH_IGUANA_THREAD_ID
static inline void iguana_thread_id_reply(CORBA_Object _client , thread_ref_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			thread_ref_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		L4_ThreadId_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_l4id;

long service_iguana_thread_l4id(L4_ThreadId_t _caller, _param_iguana_thread_l4id *_par);

inline L4_ThreadId_t iguana_thread_l4id_implementation (CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_L4ID(_func) long service_iguana_thread_l4id(L4_ThreadId_t _caller, _param_iguana_thread_l4id *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_L4ID_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_l4id IDL4_PUBLISH_IGUANA_THREAD_L4ID
static inline void iguana_thread_l4id_reply(CORBA_Object _client , L4_ThreadId_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			L4_ThreadId_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		uintptr_t ip;
		uintptr_t sp;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_start;

long service_iguana_thread_start(L4_ThreadId_t _caller, _param_iguana_thread_start *_par);

inline void iguana_thread_start_implementation (CORBA_Object _caller, thread_ref_t thread, uintptr_t ip, uintptr_t sp, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_START(_func) long service_iguana_thread_start(L4_ThreadId_t _caller, _param_iguana_thread_start *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thread, _par->_in.ip, _par->_in.sp, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_START_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_start IDL4_PUBLISH_IGUANA_THREAD_START
static inline void iguana_thread_start_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		thread_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_thread_delete;

long service_iguana_thread_delete(L4_ThreadId_t _caller, _param_iguana_thread_delete *_par);

inline void iguana_thread_delete_implementation (CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_THREAD_DELETE(_func) long service_iguana_thread_delete(L4_ThreadId_t _caller, _param_iguana_thread_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_THREAD_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_thread_delete IDL4_PUBLISH_IGUANA_THREAD_DELETE
static inline void iguana_thread_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_hardware */
void iguana_hardware_server(void);
void iguana_hardware_discard(void);


#define IGUANA_HARDWARE_DEFAULT_VTABLE { service_iguana_hardware_register_interrupt, service_iguana_hardware_back_memsection }
#define IGUANA_HARDWARE_DEFAULT_VTABLE_SIZE 2


#define IGUANA_HARDWARE_MAX_FID 1
#define IGUANA_HARDWARE_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_HARDWARE_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_HARDWARE_FID_MASK 0x1







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		hw_ref_t hardware;
		L4_ThreadId_t handler;
		int interrupt;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_hardware_register_interrupt;

long service_iguana_hardware_register_interrupt(L4_ThreadId_t _caller, _param_iguana_hardware_register_interrupt *_par);

inline int iguana_hardware_register_interrupt_implementation (CORBA_Object _caller, hw_ref_t hardware, L4_ThreadId_t *handler, int interrupt, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_HARDWARE_REGISTER_INTERRUPT_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_HARDWARE_REGISTER_INTERRUPT(_func) long service_iguana_hardware_register_interrupt(L4_ThreadId_t _caller, _param_iguana_hardware_register_interrupt *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.hardware, &_par->_in.handler, _par->_in.interrupt, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_HARDWARE_REGISTER_INTERRUPT_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_HARDWARE_REGISTER_INTERRUPT_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_hardware_register_interrupt IDL4_PUBLISH_IGUANA_HARDWARE_REGISTER_INTERRUPT
static inline void iguana_hardware_register_interrupt_reply(CORBA_Object _client , int __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		hw_ref_t hardware;
		memsection_ref_t memsection;
		uintptr_t paddr;
		uintptr_t attributes;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_hardware_back_memsection;

long service_iguana_hardware_back_memsection(L4_ThreadId_t _caller, _param_iguana_hardware_back_memsection *_par);

inline int iguana_hardware_back_memsection_implementation (CORBA_Object _caller, hw_ref_t hardware, memsection_ref_t memsection, uintptr_t paddr, uintptr_t attributes, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_HARDWARE_BACK_MEMSECTION_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_HARDWARE_BACK_MEMSECTION(_func) long service_iguana_hardware_back_memsection(L4_ThreadId_t _caller, _param_iguana_hardware_back_memsection *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.hardware, _par->_in.memsection, _par->_in.paddr, _par->_in.attributes, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_HARDWARE_BACK_MEMSECTION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_HARDWARE_BACK_MEMSECTION_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_hardware_back_memsection IDL4_PUBLISH_IGUANA_HARDWARE_BACK_MEMSECTION
static inline void iguana_hardware_back_memsection_reply(CORBA_Object _client , int __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_memsection */
void iguana_memsection_server(void);
void iguana_memsection_discard(void);


#define IGUANA_MEMSECTION_DEFAULT_VTABLE { service_iguana_memsection_register_server, service_iguana_memsection_lookup, service_iguana_memsection_delete }
#define IGUANA_MEMSECTION_DEFAULT_VTABLE_SIZE 3


#define IGUANA_MEMSECTION_MAX_FID 2
#define IGUANA_MEMSECTION_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_MEMSECTION_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_MEMSECTION_FID_MASK 0x3







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		memsection_ref_t memsection;
		thread_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_memsection_register_server;

long service_iguana_memsection_register_server(L4_ThreadId_t _caller, _param_iguana_memsection_register_server *_par);

inline int iguana_memsection_register_server_implementation (CORBA_Object _caller, memsection_ref_t memsection, thread_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_MEMSECTION_REGISTER_SERVER_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_MEMSECTION_REGISTER_SERVER(_func) long service_iguana_memsection_register_server(L4_ThreadId_t _caller, _param_iguana_memsection_register_server *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.memsection, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_REGISTER_SERVER_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_REGISTER_SERVER_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_memsection_register_server IDL4_PUBLISH_IGUANA_MEMSECTION_REGISTER_SERVER
static inline void iguana_memsection_register_server_reply(CORBA_Object _client , int __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		uintptr_t address;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		thread_ref_t server;
		memsection_ref_t __retval;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_memsection_lookup;

long service_iguana_memsection_lookup(L4_ThreadId_t _caller, _param_iguana_memsection_lookup *_par);

inline memsection_ref_t iguana_memsection_lookup_implementation (CORBA_Object _caller, uintptr_t address, thread_ref_t *server, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_MEMSECTION_LOOKUP_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_MEMSECTION_LOOKUP(_func) long service_iguana_memsection_lookup(L4_ThreadId_t _caller, _param_iguana_memsection_lookup *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_par->_out.__retval = _func(_caller, _par->_in.address, &_par->_out.server, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_LOOKUP_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_LOOKUP_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 2 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_memsection_lookup IDL4_PUBLISH_IGUANA_MEMSECTION_LOOKUP
static inline void iguana_memsection_lookup_reply(CORBA_Object _client, thread_ref_t * server , memsection_ref_t __retval )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			thread_ref_t server;
			
			memsection_ref_t __retval;
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.server = * server;
	
	_par->_out.__retval = __retval;
	
	/* send message */

	_buf._out._msgtag = 2 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		memsection_ref_t thread;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_memsection_delete;

long service_iguana_memsection_delete(L4_ThreadId_t _caller, _param_iguana_memsection_delete *_par);

inline void iguana_memsection_delete_implementation (CORBA_Object _caller, memsection_ref_t thread, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_MEMSECTION_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_MEMSECTION_DELETE(_func) long service_iguana_memsection_delete(L4_ThreadId_t _caller, _param_iguana_memsection_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.thread, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_MEMSECTION_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_memsection_delete IDL4_PUBLISH_IGUANA_MEMSECTION_DELETE
static inline void iguana_memsection_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface iguana_session */
void iguana_session_server(void);
void iguana_session_discard(void);


#define IGUANA_SESSION_DEFAULT_VTABLE { service_iguana_session_delete, service_iguana_session_add_buffer }
#define IGUANA_SESSION_DEFAULT_VTABLE_SIZE 2


#define IGUANA_SESSION_MAX_FID 1
#define IGUANA_SESSION_MSGBUF_SIZE 0 /* Unimplemented */
#define IGUANA_SESSION_STRBUF_SIZE 0 /* Unimplemented */
#define IGUANA_SESSION_FID_MASK 0x1







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		session_ref_t session;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_session_delete;

long service_iguana_session_delete(L4_ThreadId_t _caller, _param_iguana_session_delete *_par);

inline void iguana_session_delete_implementation (CORBA_Object _caller, session_ref_t session, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_SESSION_DELETE_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_SESSION_DELETE(_func) long service_iguana_session_delete(L4_ThreadId_t _caller, _param_iguana_session_delete *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.session, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_SESSION_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_SESSION_DELETE_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_session_delete IDL4_PUBLISH_IGUANA_SESSION_DELETE
static inline void iguana_session_delete_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		session_ref_t session;
		objref_t call_buf;
		objref_t return_buf;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_iguana_session_add_buffer;

long service_iguana_session_add_buffer(L4_ThreadId_t _caller, _param_iguana_session_add_buffer *_par);

inline void iguana_session_add_buffer_implementation (CORBA_Object _caller, session_ref_t session, objref_t call_buf, objref_t return_buf, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_IGUANA_SESSION_ADD_BUFFER_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_IGUANA_SESSION_ADD_BUFFER(_func) long service_iguana_session_add_buffer(L4_ThreadId_t _caller, _param_iguana_session_add_buffer *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.session, _par->_in.call_buf, _par->_in.return_buf, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_IGUANA_SESSION_ADD_BUFFER_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_IGUANA_SESSION_ADD_BUFFER_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 0 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_iguana_session_add_buffer IDL4_PUBLISH_IGUANA_SESSION_ADD_BUFFER
static inline void iguana_session_add_buffer_reply(CORBA_Object _client )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	
	
	
	/* send message */

	_buf._out._msgtag = 0 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





#endif //__-__
