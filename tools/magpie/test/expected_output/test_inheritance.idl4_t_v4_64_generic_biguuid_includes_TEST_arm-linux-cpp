/* 
 * This is an automatically-generated file.
 * Source file  : test/input/inheritance.idl4
 * Output file  : -
 * Platform     : V4 Generic (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH generic_biguuid




/* NOTE: Change the following line to correctly include the service stubs. */
#include "test/input/inheritance_service.h"






IDL4_INLINE void mother_yummy_and_nutritious_implementation(CORBA_Object _caller, int inputarg_m, int *result_m, idl4_server_environment *_env)
{
	
	/* Implementation of mother::yummy_and_nutritious */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_MOTHER_YUMMY_AND_NUTRITIOUS(mother_yummy_and_nutritious_implementation);



/* Use the default dispatch table defined in the service header. */
void * mother_vtable[MOTHER_DEFAULT_VTABLE_SIZE]
		= MOTHER_DEFAULT_VTABLE;





IDL4_INLINE void father_doh_implementation(CORBA_Object _caller, int inputarg_f, int *result_f, idl4_server_environment *_env)
{
	
	/* Implementation of father::doh */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_FATHER_DOH(father_doh_implementation);



/* Use the default dispatch table defined in the service header. */
void * father_vtable[FATHER_DEFAULT_VTABLE_SIZE]
		= FATHER_DEFAULT_VTABLE;





IDL4_INLINE void child_doh_implementation(CORBA_Object _caller, int inputarg_f, int *result_f, idl4_server_environment *_env)
{
	
	/* Implementation of child::doh */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_CHILD_DOH(child_doh_implementation);




IDL4_INLINE void child_yummy_and_nutritious_implementation(CORBA_Object _caller, int inputarg_m, int *result_m, idl4_server_environment *_env)
{
	
	/* Implementation of child::yummy_and_nutritious */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_CHILD_YUMMY_AND_NUTRITIOUS(child_yummy_and_nutritious_implementation);




IDL4_INLINE void child_eat_my_shorts_implementation(CORBA_Object _caller, int inputarg_c, int *result_c, idl4_server_environment *_env)
{
	
	/* Implementation of child::eat_my_shorts */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_CHILD_EAT_MY_SHORTS(child_eat_my_shorts_implementation);



/* Use the default dispatch table defined in the service header. */
void * child_vtable[CHILD_DEFAULT_VTABLE_SIZE]
		= CHILD_DEFAULT_VTABLE;

void server(void)
{
	L4_ThreadId_t partner;
	L4_MsgTag_t msgtag;
	idl4_msgbuf_t msgbuf;
	long cnt;

	while (1) {
		partner = L4_nilthread; /* Our initial reply is to the nilthread. */
		msgtag.raw = 0;
		cnt = 0;

		while (1) {
			idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);
			if (idl4_is_error(&msgtag)) {
				/* FIXME: Add your error handler here. */
				printf("server: error sending IPC reply\n");
				break; /* Reset thread ID to nilthread & try again */
			}
			switch(magpie_get_interface_bigid(&msgbuf)) {
				
				case 24:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							mother_vtable
							[idl4_get_function_id(&msgtag) & MOTHER_FID_MASK]);
					break;
				
				case 23:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							father_vtable
							[idl4_get_function_id(&msgtag) & FATHER_FID_MASK]);
					break;
				
				case 22:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							child_vtable
							[idl4_get_function_id(&msgtag) & CHILD_FID_MASK]);
					break;
				
			}
		}
	}
}


