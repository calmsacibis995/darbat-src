/* 
 * This is an automatically-generated file.
 * Source file  : test/input/iguana.idl4
 * Output file  : -
 * Platform     : V4 ARM (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH arm_biguuid




/* NOTE: Change the following line to correctly include the service stubs. */
#include "test/input/iguana_service.h"






IDL4_INLINE void iguana_ex_pagefault_implementation(CORBA_Object _caller, uintptr_t addr, uintptr_t ip, uintptr_t priv, fpage *fp, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_ex::pagefault */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_EX_PAGEFAULT(iguana_ex_pagefault_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_ex_vtable[IGUANA_EX_DEFAULT_VTABLE_SIZE]
		= IGUANA_EX_DEFAULT_VTABLE;





IDL4_INLINE objref_t iguana_pd_mypd_implementation(CORBA_Object _caller, idl4_server_environment *_env)
{
	objref_t retval;
	
	/* Implementation of iguana_pd::mypd */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_MYPD(iguana_pd_mypd_implementation);




IDL4_INLINE cap_t iguana_pd_create_memsection_implementation(CORBA_Object _caller, pd_ref_t pd, uintptr_t size, uintptr_t *base, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_pd::create_memsection */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_CREATE_MEMSECTION(iguana_pd_create_memsection_implementation);




IDL4_INLINE cap_t iguana_pd_create_pd_implementation(CORBA_Object _caller, pd_ref_t pd, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_pd::create_pd */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_CREATE_PD(iguana_pd_create_pd_implementation);




IDL4_INLINE cap_t iguana_pd_create_thread_implementation(CORBA_Object _caller, pd_ref_t pd, L4_ThreadId_t *l4_id, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_pd::create_thread */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_CREATE_THREAD(iguana_pd_create_thread_implementation);




IDL4_INLINE cap_t iguana_pd_create_eas_implementation(CORBA_Object _caller, pd_ref_t pd, L4_Fpage_t *kip, L4_Fpage_t *utcb, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_pd::create_eas */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_CREATE_EAS(iguana_pd_create_eas_implementation);




IDL4_INLINE cap_t iguana_pd_create_session_implementation(CORBA_Object _caller, pd_ref_t pd, thread_ref_t client, thread_ref_t server, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_pd::create_session */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_CREATE_SESSION(iguana_pd_create_session_implementation);




IDL4_INLINE void iguana_pd_set_callback_implementation(CORBA_Object _caller, pd_ref_t pd, memsection_ref_t callback_buffer, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_pd::set_callback */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_SET_CALLBACK(iguana_pd_set_callback_implementation);




IDL4_INLINE void iguana_pd_delete_implementation(CORBA_Object _caller, pd_ref_t pd, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_pd::delete */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_PD_DELETE(iguana_pd_delete_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_pd_vtable[IGUANA_PD_DEFAULT_VTABLE_SIZE]
		= IGUANA_PD_DEFAULT_VTABLE;





IDL4_INLINE cap_t iguana_eas_create_thread_implementation(CORBA_Object _caller, eas_ref_t eas, L4_ThreadId_t *start, L4_ThreadId_t *pager, L4_ThreadId_t *scheduler, uintptr_t utcb, L4_ThreadId_t *l4_id, idl4_server_environment *_env)
{
	cap_t retval;
	
	/* Implementation of iguana_eas::create_thread */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_EAS_CREATE_THREAD(iguana_eas_create_thread_implementation);




IDL4_INLINE void iguana_eas_delete_implementation(CORBA_Object _caller, eas_ref_t eas, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_eas::delete */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_EAS_DELETE(iguana_eas_delete_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_eas_vtable[IGUANA_EAS_DEFAULT_VTABLE_SIZE]
		= IGUANA_EAS_DEFAULT_VTABLE;





IDL4_INLINE thread_ref_t iguana_thread_id_implementation(CORBA_Object _caller, L4_ThreadId_t *thread, idl4_server_environment *_env)
{
	thread_ref_t retval;
	
	/* Implementation of iguana_thread::id */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_THREAD_ID(iguana_thread_id_implementation);




IDL4_INLINE L4_ThreadId_t iguana_thread_l4id_implementation(CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env)
{
	L4_ThreadId_t retval;
	
	/* Implementation of iguana_thread::l4id */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_THREAD_L4ID(iguana_thread_l4id_implementation);




IDL4_INLINE void iguana_thread_start_implementation(CORBA_Object _caller, thread_ref_t thread, uintptr_t ip, uintptr_t sp, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_thread::start */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_THREAD_START(iguana_thread_start_implementation);




IDL4_INLINE void iguana_thread_delete_implementation(CORBA_Object _caller, thread_ref_t thread, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_thread::delete */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_THREAD_DELETE(iguana_thread_delete_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_thread_vtable[IGUANA_THREAD_DEFAULT_VTABLE_SIZE]
		= IGUANA_THREAD_DEFAULT_VTABLE;





IDL4_INLINE int iguana_hardware_register_interrupt_implementation(CORBA_Object _caller, hw_ref_t hardware, L4_ThreadId_t *handler, int interrupt, idl4_server_environment *_env)
{
	int retval;
	
	/* Implementation of iguana_hardware::register_interrupt */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_HARDWARE_REGISTER_INTERRUPT(iguana_hardware_register_interrupt_implementation);




IDL4_INLINE int iguana_hardware_back_memsection_implementation(CORBA_Object _caller, hw_ref_t hardware, memsection_ref_t memsection, uintptr_t paddr, uintptr_t attributes, idl4_server_environment *_env)
{
	int retval;
	
	/* Implementation of iguana_hardware::back_memsection */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_HARDWARE_BACK_MEMSECTION(iguana_hardware_back_memsection_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_hardware_vtable[IGUANA_HARDWARE_DEFAULT_VTABLE_SIZE]
		= IGUANA_HARDWARE_DEFAULT_VTABLE;





IDL4_INLINE int iguana_memsection_register_server_implementation(CORBA_Object _caller, memsection_ref_t memsection, thread_ref_t thread, idl4_server_environment *_env)
{
	int retval;
	
	/* Implementation of iguana_memsection::register_server */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_MEMSECTION_REGISTER_SERVER(iguana_memsection_register_server_implementation);




IDL4_INLINE memsection_ref_t iguana_memsection_lookup_implementation(CORBA_Object _caller, uintptr_t address, thread_ref_t *server, idl4_server_environment *_env)
{
	memsection_ref_t retval;
	
	/* Implementation of iguana_memsection::lookup */
	return retval;
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_MEMSECTION_LOOKUP(iguana_memsection_lookup_implementation);




IDL4_INLINE void iguana_memsection_delete_implementation(CORBA_Object _caller, memsection_ref_t thread, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_memsection::delete */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_MEMSECTION_DELETE(iguana_memsection_delete_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_memsection_vtable[IGUANA_MEMSECTION_DEFAULT_VTABLE_SIZE]
		= IGUANA_MEMSECTION_DEFAULT_VTABLE;





IDL4_INLINE void iguana_session_delete_implementation(CORBA_Object _caller, session_ref_t session, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_session::delete */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_SESSION_DELETE(iguana_session_delete_implementation);




IDL4_INLINE void iguana_session_add_buffer_implementation(CORBA_Object _caller, session_ref_t session, objref_t call_buf, objref_t return_buf, idl4_server_environment *_env)
{
	
	/* Implementation of iguana_session::add_buffer */
	
}

/* Link the name of the function above with the name defined in the default vtable. */
IDL4_PUBLISH_IGUANA_SESSION_ADD_BUFFER(iguana_session_add_buffer_implementation);



/* Use the default dispatch table defined in the service header. */
void * iguana_session_vtable[IGUANA_SESSION_DEFAULT_VTABLE_SIZE]
		= IGUANA_SESSION_DEFAULT_VTABLE;

void server(void)
{
	L4_ThreadId_t partner;
	L4_MsgTag_t msgtag;
	idl4_msgbuf_t msgbuf;
	long cnt;

	while (1) {
		partner = L4_nilthread; /* Our initial reply is to the nilthread. */
		msgtag.raw = 0;
		cnt = 0;

		while (1) {
			idl4_reply_and_wait(&partner, &msgtag, &msgbuf, &cnt);
			if (idl4_is_error(&msgtag)) {
				/* FIXME: Add your error handler here. */
				printf("server: error sending IPC reply\n");
				break; /* Reset thread ID to nilthread & try again */
			}
			switch(magpie_get_interface_bigid(&msgbuf)) {
				
				case 21:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_ex_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_EX_FID_MASK]);
					break;
				
				case 22:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_pd_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_PD_FID_MASK]);
					break;
				
				case 23:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_eas_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_EAS_FID_MASK]);
					break;
				
				case 24:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_thread_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_THREAD_FID_MASK]);
					break;
				
				case 25:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_hardware_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_HARDWARE_FID_MASK]);
					break;
				
				case 26:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_memsection_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_MEMSECTION_FID_MASK]);
					break;
				
				case 27:
					idl4_process_request(&partner, &msgtag, &msgbuf, &cnt,
							iguana_session_vtable
							[idl4_get_function_id(&msgtag) & IGUANA_SESSION_FID_MASK]);
					break;
				
			}
		}
	}
}


