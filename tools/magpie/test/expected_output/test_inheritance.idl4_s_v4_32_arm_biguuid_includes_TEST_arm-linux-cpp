/* 
 * This is an automatically-generated file.
 * Source file  : test/input/inheritance.idl4
 * Output file  : -
 * Platform     : V4 ARM (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH arm_biguuid

#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

/* This from $pistachio/include/l4/arm/syscalls.h */
#define MAGPIE__L4_SYSCALL                   \
        "str    fp,     [sp, #-4]! \n" \
        "mov    lr,     pc         \n" \
        "mov    pc,     ip         \n" \
        "ldr    fp,     [sp],   #4 \n"

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid_arm/idl4.h"
#ifdef __cplusplus
}
#endif





#if !defined(__-__)
#define __-__




/* Interface mother */
void mother_server(void);
void mother_discard(void);


#define MOTHER_DEFAULT_VTABLE { service_mother_yummy_and_nutritious }
#define MOTHER_DEFAULT_VTABLE_SIZE 1


#define MOTHER_MAX_FID 0
#define MOTHER_MSGBUF_SIZE 0 /* Unimplemented */
#define MOTHER_STRBUF_SIZE 0 /* Unimplemented */
#define MOTHER_FID_MASK 0x0







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		int inputarg_m;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int result_m;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_mother_yummy_and_nutritious;

long service_mother_yummy_and_nutritious(L4_ThreadId_t _caller, _param_mother_yummy_and_nutritious *_par);

inline void mother_yummy_and_nutritious_implementation (CORBA_Object _caller, int inputarg_m, int *result_m, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_MOTHER_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_MOTHER_YUMMY_AND_NUTRITIOUS(_func) long service_mother_yummy_and_nutritious(L4_ThreadId_t _caller, _param_mother_yummy_and_nutritious *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.inputarg_m, &_par->_out.result_m, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_MOTHER_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_MOTHER_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_mother_yummy_and_nutritious IDL4_PUBLISH_MOTHER_YUMMY_AND_NUTRITIOUS
static inline void mother_yummy_and_nutritious_reply(CORBA_Object _client, int * result_m )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int result_m;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.result_m = * result_m;
	
	
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface father */
void father_server(void);
void father_discard(void);


#define FATHER_DEFAULT_VTABLE { service_father_doh }
#define FATHER_DEFAULT_VTABLE_SIZE 1


#define FATHER_MAX_FID 0
#define FATHER_MSGBUF_SIZE 0 /* Unimplemented */
#define FATHER_STRBUF_SIZE 0 /* Unimplemented */
#define FATHER_FID_MASK 0x0







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		int inputarg_f;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int result_f;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_father_doh;

long service_father_doh(L4_ThreadId_t _caller, _param_father_doh *_par);

inline void father_doh_implementation (CORBA_Object _caller, int inputarg_f, int *result_f, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_FATHER_DOH_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_FATHER_DOH(_func) long service_father_doh(L4_ThreadId_t _caller, _param_father_doh *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.inputarg_f, &_par->_out.result_f, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_FATHER_DOH_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_FATHER_DOH_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_father_doh IDL4_PUBLISH_FATHER_DOH
static inline void father_doh_reply(CORBA_Object _client, int * result_f )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int result_f;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.result_f = * result_f;
	
	
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}




/* Interface child */
void child_server(void);
void child_discard(void);


#define CHILD_DEFAULT_VTABLE { service_child_eat_my_shorts }
#define CHILD_DEFAULT_VTABLE_SIZE 1


#define CHILD_MAX_FID 0
#define CHILD_MSGBUF_SIZE 0 /* Unimplemented */
#define CHILD_STRBUF_SIZE 0 /* Unimplemented */
#define CHILD_FID_MASK 0x0







typedef union {
	struct {
		long _msgtag;
		long _uuid;
		int inputarg_f;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int result_f;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_child_doh;

long service_child_doh(L4_ThreadId_t _caller, _param_child_doh *_par);

inline void child_doh_implementation (CORBA_Object _caller, int inputarg_f, int *result_f, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_CHILD_DOH_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_CHILD_DOH(_func) long service_child_doh(L4_ThreadId_t _caller, _param_child_doh *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.inputarg_f, &_par->_out.result_f, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_CHILD_DOH_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_CHILD_DOH_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_child_doh IDL4_PUBLISH_CHILD_DOH
static inline void child_doh_reply(CORBA_Object _client, int * result_f )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int result_f;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.result_f = * result_f;
	
	
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		int inputarg_m;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int result_m;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_child_yummy_and_nutritious;

long service_child_yummy_and_nutritious(L4_ThreadId_t _caller, _param_child_yummy_and_nutritious *_par);

inline void child_yummy_and_nutritious_implementation (CORBA_Object _caller, int inputarg_m, int *result_m, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_CHILD_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_CHILD_YUMMY_AND_NUTRITIOUS(_func) long service_child_yummy_and_nutritious(L4_ThreadId_t _caller, _param_child_yummy_and_nutritious *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.inputarg_m, &_par->_out.result_m, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_CHILD_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_CHILD_YUMMY_AND_NUTRITIOUS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_child_yummy_and_nutritious IDL4_PUBLISH_CHILD_YUMMY_AND_NUTRITIOUS
static inline void child_yummy_and_nutritious_reply(CORBA_Object _client, int * result_m )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int result_m;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.result_m = * result_m;
	
	
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





typedef union {
	struct {
		long _msgtag;
		long _uuid;
		int inputarg_c;
		
	} _in;
	struct {
		long _spacer[__L4_NUM_MRS];
		long _msgtag;
		int result_c;
		
	} _out;
	struct {
		long _spacer[__L4_NUM_MRS*2];
		idl4_inverse_stringitem _str[16];
		long _acceptor;
	} _buf;
} _param_child_eat_my_shorts;

long service_child_eat_my_shorts(L4_ThreadId_t _caller, _param_child_eat_my_shorts *_par);

inline void child_eat_my_shorts_implementation (CORBA_Object _caller, int inputarg_c, int *result_c, idl4_server_environment *_env);


/* Number of output words is the size of the structure minus padding and message tag. */

#define _MAGPIE_CHILD_EAT_MY_SHORTS_OUTPUT_BYTES (sizeof(_par->_out) - (sizeof(long) * __L4_NUM_MRS) - (sizeof(long)))



#define IDL4_PUBLISH_CHILD_EAT_MY_SHORTS(_func) long service_child_eat_my_shorts(L4_ThreadId_t _caller, _param_child_eat_my_shorts *_par) { \
	idl4_server_environment _env; \
	_env._action = 0;\
\
	/* invoke service */ \
	_func(_caller, _par->_in.inputarg_c, &_par->_out.result_c, &_env); \
\
	if (IDL4_EXPECT_TRUE(_env._action == 0)) {\
		/* Why marshal things to themselves? */ \
		/* jump back */ \
		/* the weird numbers: (2 * num fpages) << 6 + (num output words ) */ \
		_par->_out._msgtag = (0 << 6) + \
			(_MAGPIE_CHILD_EAT_MY_SHORTS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		return (0 << 6) + \
			(_MAGPIE_CHILD_EAT_MY_SHORTS_OUTPUT_BYTES / MAGPIE_BYTES_PER_WORD); \
		/*was 1 */\
	} \
	return -1; \
}




#define IDL4_PUBLISH_child_eat_my_shorts IDL4_PUBLISH_CHILD_EAT_MY_SHORTS
static inline void child_eat_my_shorts_reply(CORBA_Object _client, int * result_c )
{
	struct _reply_buffer {
		struct {
			long _msgtag;
			
			int result_c;
			
			
		} _out;
	} _buf;
	struct _reply_buffer *_par = &_buf;

	/* Marshal reply */
	_par->_out.result_c = * result_c;
	
	
	
	/* send message */

	_buf._out._msgtag = 1 + (0 << 6);
	L4_MsgLoad((L4_Msg_t *)((void *)_par));
	L4_Reply(_client);
}





#endif //__-__
