/* 
 * This is an automatically-generated file.
 * Source file  : test/input/const_propagation_fromheaders.idl4
 * Output file  : -
 * Platform     : V4 Generic (big UUID)
 * Mapping      : CORBA C
 *
 * Generated by Magpie VERSION_REMOVED
*/

#define IDL4_OMIT_FRAME_POINTER 0 /* Unimplemented */
#define IDL4_USE_FASTCALL 0 /* Unimplemented */
#define IDL4_NEED_MALLOC 0 /* Unimplemented */
#define IDL4_API v4
#define IDL4_ARCH generic_biguuid


#define MAGPIE_BYTES_PER_WORD (sizeof(L4_Word_t))

#ifdef __cplusplus
extern "C" {
#endif
#include "idl4biguuid/idl4.h"
#ifdef __cplusplus
}
#endif



#include "constants.h"



#if !defined(__-__)
#define __-__




/* Interface keypad_interface_device */
#if !defined(_objdef___keypad_interface_device)
#define _objdef___keypad_interface_device
typedef CORBA_Object keypad_interface_device;
#endif // !defined(_objdef___keypad_interface_device)




#if !defined(_funcdef___keypad_interface_device_create)
#define _funcdef___keypad_interface_device_create
/* Biguuid generic code: _MAGPIE_KEYPAD_INTERFACE_DEVICE_CREATE_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_KEYPAD_INTERFACE_DEVICE_CREATE_CALL_ID (0u)

static inline long keypad_interface_device_create (keypad_interface_device _service, long driver, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			long driver;
			
		} _in;
		struct {
			long _msgtag;
			long __retval;
			
		} _out;
	} _pack;
	/* marshal */
	
		
		
		
		_pack._in.driver = (long)driver;
	
	_pack._in._uuid = KEYPAD_UUID_DEVICE;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_KEYPAD_INTERFACE_DEVICE_CREATE_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	/* Return normally. */
	return _pack._out.__retval;
	

}
#endif // !defined(_funcdef___keypad_interface_device_create)




/* Interface keypad_interface_device2 */
#if !defined(_objdef___keypad_interface_device2)
#define _objdef___keypad_interface_device2
typedef CORBA_Object keypad_interface_device2;
#endif // !defined(_objdef___keypad_interface_device2)




#if !defined(_funcdef___keypad_interface_device2_create)
#define _funcdef___keypad_interface_device2_create
/* Biguuid generic code: _MAGPIE_KEYPAD_INTERFACE_DEVICE2_CREATE_CALL_ID is simply the function number.
 * The interface ID is encoded as a separate input parameter. 
*/
#define _MAGPIE_KEYPAD_INTERFACE_DEVICE2_CREATE_CALL_ID (0u)

static inline long keypad_interface_device2_create (keypad_interface_device2 _service, long driver, CORBA_Environment *_env)
{



	long _exception;
	L4_MsgTag_t _result;

	/* NB: This union is declared volatile to work around a bug in gcc 3.3.3 */
#ifdef __cplusplus
	union _buf {
#else
	volatile union _buf {
#endif
		struct {
			long _msgtag;
			long _uuid;
			long driver;
			
		} _in;
		struct {
			long _msgtag;
			long __retval;
			
		} _out;
	} _pack;
	/* marshal */
	
		
		
		
		_pack._in.driver = (long)driver;
	
	_pack._in._uuid = KEYPAD_UUID_DEVICE2;

	/* invoke IPC: NB we subtract the size of _msgtag. */
	_pack._in._msgtag = ((sizeof(_pack._in) - sizeof(long)) / MAGPIE_BYTES_PER_WORD) + ((_MAGPIE_KEYPAD_INTERFACE_DEVICE2_CREATE_CALL_ID) << 16);
	L4_MsgLoad((L4_Msg_t *)((void *)&_pack._in));
	
	
	_result = L4_Call(_service);
	
	L4_MsgStore(_result, (L4_Msg_t *)((void *)&_pack));
	

	_exception = L4_Label(_result);

	
	if (_env != 0) {
		if (!L4_IpcSucceeded(_result)) {
			*(L4_Word_t *)_env = CORBA_SYSTEM_EXCEPTION + (L4_ErrorCode() << 8);
		} else {
			*(L4_Word_t *)_env = _exception;
		}
	}

	/* Return normally. */
	return _pack._out.__retval;
	

}
#endif // !defined(_funcdef___keypad_interface_device2_create)





#endif //__-__
